// var Number counter1
// var Number counter_alice
// var Number counter_ngnix
// var Number check
// rule "Check presenza hosts su IP"
// when
//    Member of gIP changed
// then
//     val host = triggeringItem
//     val telegramActions = getActions("telegram","telegram:telegramBot:Telegram_Bot") 
//     if (host.state==ON) {
//         if (host.name=="Ngnix_443") {
//             counter_ngnix = 0
//             if (check==1) {
//                 telegramActions.sendTelegram("Host " + host.name + " connesso in rete < 3")
//             }
//         }
//         if (host.name == "Alice") {
//             counter_alice = 0
//         }
//         if (host.name != "Alice" && host.name != "Graziella" && host.name != "Massimiliano" ) {
//                 telegramActions.sendTelegram("Host " + host.name + " connesso in rete")
//         }
//     }
//     else { 
//         val telegramActions = getActions("telegram","telegram:telegramBot:Telegram_Bot")
//         if (host.name == "Ngnix_443"){
//             counter_ngnix = counter_ngnix + 1
//             if (counter_ngnix > 3) {
//                check = 1
//                telegramActions.sendTelegram("Host " + host.name + " perso dalla rete > 3 !!!!")  
//             }
//         }
//         else if (host.name != "Alice" && host.name != "Graziella" && host.name != "Massimiliano" ) {
//             telegramActions.sendTelegram("Host " + host.name + " perso dalla rete!!!!")
//         }
//         else if (host.name == "Graziella") { //Dopo che Graziella esce la mattina spegni condizionatore soggiorno
//             if (now.getHour < 9) {
//                 DaikinACUnit_Power_Soggiorno.sendCommand(OFF)
//                 logInfo("Network", "Cond Soggiorno Spento perchè Graziella è andata a lavoro" )
//             }
//         }
//         else if (host.name == "Alice") { //Dopo che Alice esce la mattina spegni condizionatore cameretta
//             counter_alice = counter_alice + 1
//                 if (counter_alice > 3) {
//                     //check2 = 1
//                     if (now.getHour < 9 || now.getHour > 7 || DaikinACUnit_Mode_Cameretta.state=="HEAT"|| isBankHoliday == false && isWeekend == false) {
//                         DaikinACUnit_Power_Cameretta.sendCommand(OFF)
//                         logInfo("Network", "Cond Cameretta Spento perchè Alice è assente, il modo è HEAT e siamo tra le 7 e le 9 e non è festa e non è fine settimana" )
//                     }
//                 }
//         }
//    }
// end

rule "Network case"
    when
        Member of gIP changed
    then
    val host = triggeringItem
    switch(host.state) {
        case ON: {
            val telegramActions = getActions("telegram","telegram:telegramBot:Telegram_Bot") 
            //logInfo("Network-case", "Host in ON " + host.name)
            logInfo("Network case ON", "Valore di host.name: " + host.name + " (Tipo: " + host.name.getClass() + ")")
            if (host.name == "Ngnix_443") {
                    telegramActions.sendTelegram("Host " + host.name + " connesso in rete")
            }    

            else if (host.name != "Alice" && host.name != "Graziella" && host.name != "Massimiliano" ) {
                telegramActions.sendTelegram("Host " + host.name + " connesso in rete")
            }
            else {
                logInfo("Network case ON", "Case ON, else " + host.name)
            }
        }
        case OFF: {
            val telegramActions = getActions("telegram","telegram:telegramBot:Telegram_Bot")
            logInfo("Network case OFF", "Valore di host.name: " + host.name + " (Tipo: " + host.name.getClass() + ")")
            if (host.name == "Ngnix_443"){
                telegramActions.sendTelegram("Host " + host.name + " perso dalla rete > 3 !!!!")  
            }
            else if (host.name != "Alice" && host.name != "Graziella" && host.name != "Massimiliano" ) {
                telegramActions.sendTelegram("Host " + host.name + " perso dalla rete!!!!")
            }
            else if (host.name == "Graziella") { //Dopo che Graziella esce la mattina spegni condizionatore soggiorno
                if (now.getHour >= 7 && now.getHour <= 9 && DaikinACUnit_Mode_Soggiorno.state == "HEAT" && DaikinACUnit_Power_Soggiorno.state == ON && (isBankHoliday == false || isWeekend == false)) {
                    DaikinACUnit_Power_Soggiorno.sendCommand(OFF)
                    DaikinACUnit_Power_Letto.sendCommand(OFF)
                    logInfo("Network case OFF", "Cond Soggiorno e Letto Spento perchè Graziella è uscita, il modo è HEAT e siamo tra le 7 e le 9 e non è festa e non è fine settimana")
                }
                logInfo("Network case OFF", "Graziella è uscita, ma non ci sono le condizioni per spegnere i condizionatori")
                logInfo("Network case OFF", "Ora attuale: " + now.getHour)
                logInfo("Network case OFF", "Modalità Condizionatore soggiorno: " + DaikinACUnit_Mode_Soggiorno.state)
                logInfo("Network case OFF", "È festa: " + isBankHoliday + ", È weekend: " + isWeekend)
            }
            else if (host.name == "Alice") { //Dopo che Alice esce la mattina spegni condizionatore cameretta
                if (now.getHour >= 7 && now.getHour <= 9 && DaikinACUnit_Mode_Cameretta.state == "HEAT" && DaikinACUnit_Power_Cameretta.state == ON && (isBankHoliday == false || isWeekend == false)) {
                    DaikinACUnit_Power_Cameretta.sendCommand(OFF)
                    logInfo("Network case OFF", "Cond Cameretta Spento perchè Alice è assente, il modo è HEAT e siamo tra le 7 e le 9 e non è festa e non è fine settimana")
                    }            
                }
            else {
                logInfo("Network-case OFF", "Case OFF, else " + host.name)
                logInfo("Network case OFF", "Ora attuale: " + now.getHour)
                logInfo("Network case OFF", "Modalità Condizionatore soggiorno: " + DaikinACUnit_Mode_Soggiorno.state)
                logInfo("Network case OFF", "È festa: " + isBankHoliday + ", È weekend: " + isWeekend)  
            }
        }
        default: {
            logInfo("Network case DEFAULT", "Caso default")
        }
    }
end