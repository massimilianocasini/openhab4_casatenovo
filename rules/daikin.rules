
var int controllo = 0 // Variabile di controllo per evitare che il timer venga creato più volte
var int controllo_1 = 0 //Variabile per evitare che nel log vengano loggati tutti i condizionatori che cambiano stato
rule "Forzatura setpoint sui condizionatori al cambio di Modalità"
when
        Member of gEqCondMode changed
then
        if (controllo_1 == 1) {
          logInfo("CondMode", "Controllo in corso, non posso cambiare modalità condizionatori")
          return // Esce dalla regola se il controllo è già in corso
        }
        val item = triggeringItem
        controllo_1 = 1
        logInfo("CondMode", "Item che ha cambiato stato " + item.name + " " + item.state + " " + controllo) 
        if (item.state == "COLD" && controllo == 0) { //Modalità estate
          controllo = 1
          logInfo("CondMode", "Creato Timer 15 sec per passaggio a COLD a 27° di tutti i Condizionatori " + controllo)
          createTimer(now.plusSeconds(15), [|
            gEqCondSetPoint.sendCommand(27)
            gEqCondMode.sendCommand("COLD")
            controllo = 0
            controllo_1 = 0
            logInfo("CondMode", "Forzato passaggio a COLD a 27° di tutti i condizionatori " + controllo )
          ])
        }

        if (item.state == "HEAT" && controllo == 0) {  //Modalità inverno
          logInfo("CondMode", "Creato Timer 15 sec per passaggio a HEAT a 22° di tutti i Condizionatori")
          controllo = 1
          createTimer(now.plusSeconds(15), [|
            gEqCondSetPoint.sendCommand(22)
            gEqCondMode.sendCommand("HEAT")
            logInfo("CondMode", "Forzato passaggio a HEAT a 22° di tutti i condizionatori" )
            createTimer(now.plusSeconds(15), [| 
              controllo = 0
              controllo_1 = 0
            ])
        ])
           }  
end

rule "Timer Condizionamento DaikinACUnit_Power_Studio"
  when
    Item DaikinACUnit_ac_timer_on_off_Studio changed
  then
    if (DaikinACUnit_ac_timer_on_off_Studio.state == ON ) {
      if  (DaikinACUnit_ac_timer_Studio.state == 0) {
        DaikinACUnit_ac_timer_Studio.postUpdate(60)
      }
      DaikinACUnit_Power_Studio.sendCommand(ON)
      
      createTimer(now.plusMinutes((DaikinACUnit_ac_timer_Studio.state as Number).intValue),  [ |
        DaikinACUnit_Power_Studio.sendCommand(OFF)
        DaikinACUnit_ac_timer_on_off_Studio.sendCommand(OFF)
        DaikinACUnit_ac_timer_Studio.postUpdate(0)
      ])
     }
     else
        DaikinACUnit_ac_timer_Studio.postUpdate(0)
end

rule "Spegni condizionamento la notte se in HEAT"
when 
Time cron "0 30 23 ? * * *"
then
 if (DaikinACUnit_Mode_Studio.state=="HEAT"){
     DaikinACUnit_Power_Studio.sendCommand(OFF)
 }
  if (DaikinACUnit_Mode_Soggiorno.state=="HEAT"){
     DaikinACUnit_Power_Soggiorno.sendCommand(OFF)
 }
  if (DaikinACUnit_Mode_Cameretta.state=="HEAT"){
     DaikinACUnit_Power_Cameretta.sendCommand(OFF)
 }
  if (DaikinACUnit_Mode_Letto.state=="HEAT"){
     DaikinACUnit_Power_Letto.sendCommand(OFF)
 }
end

rule "Imposta condizionamento a Umidificatore nel caso sia Raffrescamento di notte"
when 
Time cron "0 00 23 ? * * *"
then
 if (gEqCondMode.state=="COLD"){
     gEqCondMode.sendCommand("DEHUMIDIFIER")
 }
end
// rule "Allinea gEqCondSetPoint"
// when 
//   Member of gEqCondSetPoint changed
// then
//   val item = triggeringItem
//   var int setpoint
//   if (setpoint = item.state > 0) {
//     setpoint = (item.state as QuantityType<Number>).toBigDecimal
//     logInfo("gEqCondSetPoint", "setpoint " + setpoint)
//     gEqCondSetPoint.postUpdate(setpoint) // uso posUpdate invece di sendCommand perchè voglio che le temperetaure 
//                                         //vengano allineate solo quando uso il setpoint generale. Se cambio la temperature su un singolo condizionatore non deve cambiare set point anche sugli altri
//   }
// end
